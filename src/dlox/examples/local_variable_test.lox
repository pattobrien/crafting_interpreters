
// -- expression statements --
print "-----------------";
print "print statements: ";
print 1 + 1;

// -- variable declarations --
var a = "global a";
print "";
print "-----------------";
print a;


// block statement, with its own local scope
{
  var a = "local a";
  print "";
  print "Local variables: " + a; // global a is shadowed by local a variable
}
// native clock function
print "-----------------";
print "current time: ";
print clock();


// -- function declarations --
fun sayHi(first, last) {
  print "Hi, " + first + " " + last + "!";
}

print "";
print "-----------------";
sayHi("Dear", "Reader");

// -- return statements --
fun fib(n) {
  if (n <= 1) return n;
  return fib(n - 2) + fib(n - 1);
}

for (var i = 0; i < 10; i = i + 1) {
  print fib(i);
}

// -- nested function --
fun makeCounter() {
  var i = 0;
  fun count() {
    i = i + 1;
    print i;
  }

  return count;
}

var counter = makeCounter();
counter(); // "1".
counter(); // "2".

// -- class declarations --
class DevonshireCream {
  serveOn() {
    return "Scones";
  }
}

print DevonshireCream; // Prints "DevonshireCream".

// -- class instance creation --
var cream = DevonshireCream();
print cream; // Prints "DevonshireCream instance".

// -- method calls --
print cream.serveOn(); // Prints "Scones".

// -- constructor declarations (via `init`) --
class Muffin {
  init(flavor) {
    this.flavor = flavor;
  }

  eat() {
    print "Mmm, " + this.flavor + " muffin!";
  }
}

var blueberry = Muffin("blueberry");
blueberry.eat(); // Prints "Mmm, blueberry muffin!".

// -- inheritance --
class Doughnut {
  cook() {
    print "Fry until golden brown.";
  }
}

class BostonCream < Doughnut {}

BostonCream().cook();

// -- `super` calls --
print "";
print "-----------------";
print "super calls: ";

class BostonCream < Doughnut {
  cook() {
    super.cook();
    print "Pipe full of custard and coat with chocolate.";
  }
}

BostonCream().cook(); // should print two lines (one from the super method, and one from the subclass method)